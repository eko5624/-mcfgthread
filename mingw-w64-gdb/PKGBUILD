# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=gdb
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-multiarch")
pkgver=14.0.91+20231108
_branch=gdb-14-branch
_sourcedir=${_realname}
pkgrel=1
pkgdesc="GNU Debugger (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url="https://www.gnu.org/software/gdb/"
license=('spdx:GPL-3.0-or-later')
groups=($( [[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-toolchain" ))
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-mpc"
         "${MINGW_PACKAGE_PREFIX}-mpfr"
         "${MINGW_PACKAGE_PREFIX}-ncurses"
         "${MINGW_PACKAGE_PREFIX}-python"
         "${MINGW_PACKAGE_PREFIX}-readline"
         "${MINGW_PACKAGE_PREFIX}-xxhash"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-zstd")
optdepends=("${MINGW_PACKAGE_PREFIX}-python-pygments: for syntax highlighting")
checkdepends=('dejagnu' 'bc')
# gmp, mpfr and xz (lzma) are linked statically
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools"
             "${MINGW_PACKAGE_PREFIX}-iconv"
             "${MINGW_PACKAGE_PREFIX}-xz")
source=(${_sourcedir}::"git://sourceware.org/git/binutils-gdb.git#branch=${_branch}"
        '0001-Workaround-performance-regression-in-info-func-var-t.patch'
        '0002-Fix-using-gnu-print.patch'
        '0003-configure-Disable-static-linking-with-standard-libs.patch'
        '0004-Python-Configure-path-fixes.patch'
        '0005-W32-Always-check-USERPROFILE-if-HOME-is-not-set.patch'
        '0006-gdb-i386-tdep-Use-Intel-syntax-by-default.patch')
validpgpkeys=('F40ADB902B24264AA42E50BF92EDB04BFF325CF3')
sha256sums=('SKIP'
            '7c0c03198b06208f47352346f7fce57333be07058211bbeeba0c507406f2a0a5'
            '3704274e47836c5bada02517418c736c29cc5172dda30cc4e851314ab866c89e'
            'b5af1ce65583975230df04298d3472116c2556825661e56e75b4e562b61e42a1'
            '4bd9e4ddd02150fe585a3992b3b8cc3647d68dc53b6fbfd209072a22fa47b053'
            '80e52865940331657377e2dcde21e7797c0442be004e39007d073b13ae1ff860'
            '0ae7583ae0be9f553af6aa55842878b26bccb052c45c04e9a41ad212198c118d')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

pkgver() {
  cd ${srcdir}/${_sourcedir}
  _gdb_date=$(sed -n -e 's/^.* BFD_VERSION_DATE \(.*\)$/\1/p'  bfd/version.h)
  head -n 1 gdb/version.in | sed -n -e "s/\\.DATE.*$/+$_gdb_date/p"
}

prepare() {
  cd ${srcdir}/${_sourcedir}
  git reset --hard
  git clean -fdx

  # https://sourceware.org/bugzilla/show_bug.cgi?id=15412
  apply_patch_with_msg \
    0001-Workaround-performance-regression-in-info-func-var-t.patch

  apply_patch_with_msg \
    0002-Fix-using-gnu-print.patch

  # https://sourceware.org/bugzilla/show_bug.cgi?id=21078
  apply_patch_with_msg \
    0003-configure-Disable-static-linking-with-standard-libs.patch

  apply_patch_with_msg \
    0004-Python-Configure-path-fixes.patch \
    0005-W32-Always-check-USERPROFILE-if-HOME-is-not-set.patch

  apply_patch_with_msg \
    0006-gdb-i386-tdep-Use-Intel-syntax-by-default.patch

  # hack! - libiberty configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" libiberty/configure
}

do_build() {
  builddir=${srcdir}/build-${MSYSTEM}$1
  [[ -d ${builddir} ]] && rm -rf ${builddir}
  mkdir ${builddir} && cd ${builddir}

  if [ "${CARCH}" != "x86_64" ]; then
    LDFLAGS+=" -Wl,--large-address-aware"
  fi

  if check_option "debug" "y"; then
    CFLAGS+=" -O0"
    CXXFLAGS+=" -O0"
  fi

  CPPFLAGS+=" -I${MINGW_PREFIX}/include/ncurses"
  CFLAGS+=" -I${MINGW_PREFIX}/include/ncurses"
  CXXFLAGS+=" -I${MINGW_PREFIX}/include/ncurses"

  ../${_realname}/configure \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --prefix=${MINGW_PREFIX} \
    $2 \
    --enable-64-bit-bfd \
    --disable-werror \
    --disable-win32-registry \
    --disable-rpath \
    --disable-sim \
    --with-curses \
    --with-system-gdbinit=${MINGW_PREFIX}/etc/gdbinit \
    --with-system-readline \
    --with-system-zlib \
    --with-python=${MINGW_PREFIX}/bin/python \
    --with-libiconv-prefix=${MINGW_PREFIX} \
    --with-{expat,gmp,mpfr,lzma,zstd}=${MINGW_PREFIX} \
    --enable-tui \
    --enable-source-highlight=no

  make all-gdb all-gdbserver
}

build() {
  do_build
  do_build -multiarch --enable-targets=all
}

package_gdb() {
  cd ${srcdir}/build-${MSYSTEM}
  make DESTDIR=${pkgdir} install-gdb install-gdbserver

  # Remove unwanted files
  rm -rf ${pkgdir}${MINGW_PREFIX}/share/{man,info}

  rm -f ${pkgdir}${MINGW_PREFIX}/include/*.h
  rm -f ${pkgdir}${MINGW_PREFIX}/lib/*.a
}

package_gdb-multiarch() {
  pkgdesc="GNU Debugger (supports all targets)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")

  builddir=${srcdir}/build-${MSYSTEM}-multiarch
  cd ${builddir}
  make DESTDIR=${builddir}/inst install-gdb install-gdbserver

  destdir=${pkgdir}${MINGW_PREFIX}/bin
  bindir=${builddir}/inst${MINGW_PREFIX}/bin
  mkdir -p $destdir
  cp -p ${bindir}/gdb.exe ${destdir}/gdb-multiarch.exe
  cp -p ${bindir}/gdbserver.exe ${destdir}/gdbserver-multiarch.exe
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
